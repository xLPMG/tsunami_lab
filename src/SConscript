##
# @author Luca-Philipp Grumbach
# @author Richard Hofmann
#
# # Description
# Collects sources for a build.
##
Import('env')

# gather sources
l_sources = [ 'Simulator.cpp',
              'systeminfo/SystemInfo.cpp',
              'solvers/Roe.cpp',
              'solvers/Fwave.cpp',
              'patches/WavePropagation1d.cpp',
              'patches/WavePropagation2d.cpp',
              'setups/DamBreak1d.cpp',
              'setups/CircularDamBreak2d.cpp',
              'setups/RareRare1d.cpp',
              'setups/ShockShock1d.cpp',
              'setups/GeneralDiscontinuity1d.cpp',
              'setups/Subcritical1d.cpp',
              'setups/Supercritical1d.cpp',
              'setups/TsunamiEvent1d.cpp',
              'setups/TsunamiEvent2d.cpp',
              'setups/ArtificialTsunami2d.cpp',
              'io/Csv.cpp',
              'io/BathymetryLoader.cpp',
              'io/Station.cpp',
              'calculations/Froude.cpp',
              'io/NetCdf.cpp']

for l_so in l_sources:
  env.sources.append( env.Object( l_so ) )

env.standalone = env.Object( "Server.cpp" )

# gather unit tests
l_tests = [ 'tests.cpp',
            'solvers/Roe.test.cpp',
            'solvers/Fwave.test.cpp',
            'patches/WavePropagation1d.test.cpp',
            'io/Csv.test.cpp',
            'io/BathymetryLoader.test.cpp',
            'setups/DamBreak1d.test.cpp',
            'setups/RareRare1d.test.cpp',
            'setups/ShockShock1d.test.cpp',
            'setups/GeneralDiscontinuity1d.test.cpp',
            'setups/TsunamiEvent1d.test.cpp',
            'setups/Supercritical1d.test.cpp',
            'setups/Subcritical1d.test.cpp',
            #'setups/CircularDamBreak2d.test.cpp',
            'setups/ArtificialTsunami2d.test.cpp',
            'patches/WavePropagation2d.test.cpp',
            'io/Station.test.cpp',
            'calculations/Froude.test.cpp',
            'io/NetCdf.test.cpp']

for l_te in l_tests:
  env.tests.append( env.Object( l_te ) )

# gather sanity checks
l_sanitychecks = [ 'sanitychecks.cpp' ]

for l_sa in l_sanitychecks:
  env.sanitychecks.append( env.Object( l_sa ) )

# gather gui sources
if 'yes' in env['gui']:
  l_gui = [ 'Client.cpp',
            'ui/GUI.cpp' ]

  for l_g in l_gui:
    env.gui.append( env.Object( l_g ) )

Export('env')